# ======================================================================================
# Docker Compose 설정 (개발환경) - docker-compose.yml
# ======================================================================================

version: "3.8"

services:
  # PostgreSQL 데이터베이스 (RAG 시스템용)
  postgres:
    image: postgres:15-alpine
    container_name: benefits-api-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=ttugttag
      - POSTGRES_USER=ttugttag_user
      - POSTGRES_PASSWORD=ttugttag_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./docker/postgres/init-data.sql:/docker-entrypoint-initdb.d/02-init-data.sql:ro
    networks:
      - benefits-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ttugttag_user -d ttugttag"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # ChromaDB 벡터 데이터베이스 (RAG 시스템 핵심)
  chromadb:
    image: chromadb/chroma:latest
    container_name: benefits-api-chromadb
    restart: unless-stopped
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
      - CHROMA_SERVER_CORS_ALLOW_ORIGINS=["*"]
    ports:
      - "8000:8000"
    volumes:
      - chromadb_data:/chroma/chroma
      - ./docker/chromadb/init-chroma.py:/chroma/init-chroma.py:ro
    networks:
      - benefits-network
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 40s
    command: chroma run --host 0.0.0.0 --port 8000

  # 메인 애플리케이션 서비스
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: benefits-api-app
    restart: unless-stopped
    environment:
      - FLASK_DEBUG=true
      - ENVIRONMENT=development
      - PORT=5000
      - HOST=0.0.0.0
      - LOG_LEVEL=DEBUG
      - CHROMA_SERVER_HOST=chromadb
      - CHROMA_SERVER_PORT=8000
      - DATABASE_URL=postgresql://ttugttag_user:ttugttag_password@postgres:5432/ttugttag
    env_file:
      - .env.docker
    ports:
      - "5001:5000"
    volumes:
      # 코드 핫 리로드 (개발용)
      - .:/app:rw
      # 데이터 볼륨
      - app_data:/app/data
      # 로그 볼륨
      - app_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      chromadb:
        condition: service_started
    networks:
      - benefits-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx 리버스 프록시
  nginx:
    image: nginx:alpine
    container_name: benefits-api-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx_logs:/var/log/nginx
      # SSL 인증서 (프로덕션에서만 사용)
      # - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - benefits-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis (캐싱 및 세션 저장용)
  redis:
    image: redis:7-alpine
    container_name: benefits-api-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-defaultpassword}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - benefits-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # 선택적: 로그 수집 및 모니터링
  # watchtower:
  #   image: containrrr/watchtower
  #   container_name: benefits-api-watchtower
  #   restart: unless-stopped
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   environment:
  #     - WATCHTOWER_CLEANUP=true
  #     - WATCHTOWER_POLL_INTERVAL=3600
  #   networks:
  #     - benefits-network

# 네트워크 설정
networks:
  benefits-network:
    driver: bridge
    name: benefits-network

# 볼륨 설정
volumes:
  postgres_data:
    name: benefits-postgres-data
    driver: local
  chromadb_data:
    name: benefits-chromadb-data
    driver: local
  app_data:
    name: benefits-app-data
    driver: local
  app_logs:
    name: benefits-app-logs
    driver: local
  nginx_logs:
    name: benefits-nginx-logs
    driver: local
  redis_data:
    name: benefits-redis-data
    driver: local
